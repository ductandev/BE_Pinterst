import { Injectable } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';
import { errorCode, failCode, successCode } from 'src/Config/response';
import { Response } from 'express';
import * as fs from 'fs';

import { FileUploadDto } from '../image/dto/upload.dto';
import { SaveImgType } from './entities/image.entity';


@Injectable()
export class ImageService {
  constructor() { }

  model = new PrismaClient();


  // ========================================
  //      GET DANH S√ÅCH ·∫¢NH V·ªÄ
  // ========================================
  async getAllImg(res: Response) {
    try {
      let data = await this.model.hinh_anh.findMany()

      if (data === null) {
        return failCode(res, '', 400, "Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c th√™m v√†o d·ªØ li·ªáu ·∫£nh !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:28 ~ UserService ~ getAllImg ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

  // ========================================
  //  GET T√åM KI·∫æM DANH S√ÅCH ·∫¢NH THEO T√äN
  // ========================================
  async getImgByName(nameImg: string, res: Response) {
    try {
      let data = await this.model.hinh_anh.findMany({
        where: {
          ten_hinh: {
            contains: nameImg   // LIKE '%nameImg%'
          }
        }
      })

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      errorCode(res, "L·ªói BE")
    }
  }

  // ========================================
  //  GET DANH S√ÅCH ·∫¢NH ƒê√É T·∫†O THEO USER ID
  // ========================================
  async getListImgCreateByUserId(id: string, res: Response) {
    try {
      let data = await this.model.nguoi_dung.findMany({
        where: {
          nguoi_dung_id: +id
        },
        include: {
          hinh_anh: true
        }
      });

      if (data.length === 0) {
        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:271 ~ UserService ~ getListImgCreateByUserId ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

  // ==============================================
  // GET TH√îNG TIN ·∫¢NH V√Ä NG∆Ø·ªúI T·∫†O ·∫¢NH B·∫∞NG ID ·∫¢NH
  // ==============================================
  async getInfoImgAndInfoUserById(imgID: string, res: Response) {
    try {
      let data = await this.model.hinh_anh.findMany({
        where: {
          hinh_id: +imgID
        },
        include: {
          nguoi_dung: true
        }
      });

      if (data.length === 0) {
        return failCode(res, '', 400, "·∫¢nh kh√¥ng t·ªìn t·∫°i !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:75 ~ UserService ~ getInfoImgAndInfoUserById ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

  // ========================================
  //      POST TH√äM 1 ·∫¢NH C·ª¶A USER
  // ========================================
  async uploadImg(file: Express.Multer.File, userID: string, body: FileUploadDto, res: Response) {
    try {
      let {mo_ta} = body

      let checkUserID = await this.model.nguoi_dung.findFirst({
        where: {
          nguoi_dung_id: +userID
        },
      });

      if (checkUserID === null) {
        fs.unlink(process.cwd() + "/public/img/" + file.filename, (err) => {    // x√≥a file ·∫£nh theo ƒë∆∞·ªùng d·∫´n n·∫øu ng∆∞·ªùi d√πng ko t·ªìn t·∫°i
          if (err) {
            console.error("Error deleting file:", err);
          }
        });

        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }

      const createdImage = await this.model.hinh_anh.create({
        data: {
          ten_hinh: file.filename,
          duong_dan: process.cwd() + "/public/img/" + file.filename,
          mo_ta,
          nguoi_dung_id: +userID
        }
      });

      let newData: SaveImgType = {
        nguoi_dung_id: +userID,
        hinh_id: createdImage.hinh_id, // L·∫•y hinh_id t·ª´ b·∫£n ghi v·ª´a t·∫°o
        ngay_luu: new Date()
      }
      await this.model.luu_anh.create({
        data: newData
      })

      successCode(res, file, 201, 'Th√™m ·∫£nh th√†nh c√¥ng !');
    }
    catch (exception) {
      console.log('üöÄ ~ file: user.service.ts:363 ~ UserService ~ uploadImg ~ exception:', exception,);
      errorCode(res, 'L·ªói BE !');
    }
  }

  // ========================================
  //      X√ìA ·∫¢NH ƒê√É T·∫†O THEO ID ·∫¢NH
  // ========================================
  async deleteImgCreateByUserId(id: string, res: Response) {
    try {
      let data = await this.model.hinh_anh.findFirst({
        where: {
          hinh_id: +id
        }
      });

      if (data === null) {
        return failCode(res, '', 400, "H√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i n√™n kh√¥ng th·ªÉ x√≥a !")
      }

      // Tr∆∞·ªõc ti√™n, h√£y ki·ªÉm tra c√°c tham chi·∫øu ƒë·∫øn b·∫£n ghi n√†y v√† x√≥a ch√∫ng
      await this.model.luu_anh.deleteMany({
        where: {
          hinh_id: +id
        }
      });

      await this.model.binh_luan.deleteMany({
        where: {
          hinh_id: +id
        }
      });

      // Sau ƒë√≥, b·∫°n c√≥ th·ªÉ x√≥a b·∫£n ghi hinh_anh b√¨nh th∆∞·ªùng
      await this.model.hinh_anh.delete({
        where: {
          hinh_id: +id
        }
      });

      successCode(res, data, 200, "X√≥a ·∫£nh th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:315 ~ UserService ~ deleteImgCreateByUserId ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }















}
