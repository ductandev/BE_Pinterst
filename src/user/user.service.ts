import { Injectable, Param } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';
import { ConfigService } from '@nestjs/config';
import { UserSignUpType } from 'src/auth/entities/auth.entity';
import { Response } from 'express';
import { errorCode, failCode, successCode } from 'src/Config/response';
// TH∆Ø VI·ªÜN M√É H√ìA PASSWORD
// yarn add bcrypt
import * as bcrypt from 'bcrypt';
import { UserCommentType, UserImgType, UserSaveImgType } from './entities/user.entity';
import * as fs from 'fs';
import { FileUploadDto } from './dto/upload.dto';

@Injectable()
export class UserService {
  constructor(private configService: ConfigService) { }

  model = new PrismaClient();


  // ========================================
  //      GET DANH S√ÅCH ·∫¢NH V·ªÄ
  // ========================================
  async getAllImg(res: Response) {
    try {
      let data = await this.model.hinh_anh.findMany()

      if (data === null) {
        return failCode(res, '', 400, "Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c th√™m v√†o d·ªØ li·ªáu ·∫£nh !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:28 ~ UserService ~ getAllImg ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

  // ========================================
  //  GET T√åM KI·∫æM DANH S√ÅCH ·∫¢NH THEO T√äN
  // ========================================
  async getImgByName(nameImg: string, res: Response) {
    try {
      let data = await this.model.hinh_anh.findMany({
        where: {
          ten_hinh: {
            contains: nameImg   // LIKE '%nameImg%'
          }
        }
      })

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      errorCode(res, "L·ªói BE")
    }
  }


  // ==============================================
  // GET TH√îNG TIN ·∫¢NH V√Ä NG∆Ø·ªúI T·∫†O ·∫¢NH B·∫∞NG ID ·∫¢NH
  // ==============================================
  async getInfoImgAndInfoUserById(imgID: string, res: Response) {
    try {
      let data = await this.model.hinh_anh.findMany({
        where: {
          hinh_id: +imgID
        },
        include: {
          nguoi_dung: true
        }
      });

      if (data.length === 0) {
        return failCode(res, '', 400, "·∫¢nh kh√¥ng t·ªìn t·∫°i !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:75 ~ UserService ~ getInfoImgAndInfoUserById ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }


  // ==============================================
  //      GET TH√îNG TIN B√åNH LU·∫¨N THEO ID ·∫¢NH
  // ==============================================
  async getInfoCommentByImgId(imgID: string, res: Response) {
    try {
      let data = await this.model.hinh_anh.findMany({
        where: {
          hinh_id: +imgID
        },
        include: {
          binh_luan: true
        }
      });

      if (data.length === 0) {
        return failCode(res, '', 400, "·∫¢nh kh√¥ng t·ªìn t·∫°i !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:107 ~ UserService ~ getInfoCommentByImgId ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }


  // ==============================================
  // GET TH√îNG TIN ƒê√É L∆ØU H√åNH N√ÄY CH∆ØA THEO ID ·∫¢NH
  // ==============================================
  async getInfoSaveImgByImgId(imgID: string, res: Response) {
    try {
      let data = await this.model.hinh_anh.findMany({
        where: {
          hinh_id: +imgID
        },
        include: {
          luu_anh: true
        }
      });

      if (data.length === 0) {
        return failCode(res, '', 400, "·∫¢nh ch∆∞a ƒë∆∞·ª£c l∆∞u !")
      }

      successCode(res, data, 200, "·∫¢nh ƒë√£ ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc ƒë√≥ !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:129 ~ UserService ~ getInfoSaveImgByImgId ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }


  // ===========================================================
  // POST ƒê·ªÇ L∆ØU TH√îNG TIN B√åNH LU·∫¨N C·ª¶A NG∆Ø·ªúI D√ôNG V·ªöI H√åNH ·∫¢NH.
  // ===========================================================
  async postCommentImg(body: UserCommentType, res: Response) {
    try {
      let { nguoi_dung_id, hinh_id, ngay_binh_luan, noi_dung } = body;

      let checkUserID = await this.model.nguoi_dung.findFirst({
        where: {
          nguoi_dung_id,
        },
      });

      let checkImgID = await this.model.hinh_anh.findFirst({
        where: {
          hinh_id,
        },
      });

      if (checkUserID === null) {
        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }
      if (checkImgID === null) {
        return failCode(res, '', 400, "H√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i !")
      }

      // let newData = {
      //   nguoi_dung_id,
      //   hinh_id,
      //   ngay_binh_luan,
      //   noi_dung,
      // };

      await this.model.binh_luan.create({
        data: body,
      });

      successCode(res, body, 201, "Th√™m b√¨nh lu·∫≠n th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:180 ~ UserService ~ postCommentImg ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }


  // ========================================
  //      GET INFO ALL USER
  // ========================================
  async getInfoAllUser(res: Response) {
    try {
      let data = await this.model.nguoi_dung.findMany()
      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:195 ~ UserService ~ getInfoAllUser ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

  // ========================================
  //      GET INFO BY USER_ID
  // ========================================
  async getInfoByUserId(id: string, res: Response) {
    try {
      let data = await this.model.nguoi_dung.findFirst({
        where: {
          nguoi_dung_id: +id
        }
      });

      if (data === null) {
        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:218 ~ UserService ~ getInfoByUserId ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

  // ========================================
  //  GET DANH S√ÅCH ·∫¢NH ƒê√É L∆ØU THEO USER ID
  // ========================================
  async getListImgSaveByUserId(id: string, res: Response) {
    try {
      let data = await this.model.nguoi_dung.findMany({
        where: {
          nguoi_dung_id: +id
        },
        include: {
          luu_anh: true
        }
      });

      if (data.length === 0) {
        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:245 ~ UserService ~ getListImgSaveByUserId ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

  // ========================================
  //  GET DANH S√ÅCH ·∫¢NH ƒê√É T·∫†O THEO USER ID
  // ========================================
  async getListImgCreateByUserId(id: string, res: Response) {
    try {
      let data = await this.model.nguoi_dung.findMany({
        where: {
          nguoi_dung_id: +id
        },
        include: {
          hinh_anh: true
        }
      });

      if (data.length === 0) {
        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:271 ~ UserService ~ getListImgCreateByUserId ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }


  // ========================================
  //      X√ìA ·∫¢NH ƒê√É T·∫†O THEO ID ·∫¢NH
  // ========================================
  async deleteImgCreateByUserId(id: string, res: Response) {
    try {
      let data = await this.model.hinh_anh.findFirst({
        where: {
          hinh_id: +id
        }
      });

      if (data === null) {
        return failCode(res, '', 400, "H√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i n√™n kh√¥ng th·ªÉ x√≥a !")
      }

      // Tr∆∞·ªõc ti√™n, h√£y ki·ªÉm tra c√°c tham chi·∫øu ƒë·∫øn b·∫£n ghi n√†y v√† x√≥a ch√∫ng
      await this.model.luu_anh.deleteMany({
        where: {
          hinh_id: +id
        }
      });

      await this.model.binh_luan.deleteMany({
        where: {
          hinh_id: +id
        }
      });

      // Sau ƒë√≥, b·∫°n c√≥ th·ªÉ x√≥a b·∫£n ghi hinh_anh b√¨nh th∆∞·ªùng
      await this.model.hinh_anh.delete({
        where: {
          hinh_id: +id
        }
      });

      successCode(res, data, 200, "X√≥a ·∫£nh th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:315 ~ UserService ~ deleteImgCreateByUserId ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }


  // ========================================
  //      POST TH√äM 1 ·∫¢NH C·ª¶A USER
  // ========================================
  async uploadImg(file: Express.Multer.File, userID: string, body: FileUploadDto, res: Response) {
    try {
      let {mo_ta} = body

      let checkUserID = await this.model.nguoi_dung.findFirst({
        where: {
          nguoi_dung_id: +userID
        },
      });

      if (checkUserID === null) {
        fs.unlink(process.cwd() + "/public/img/" + file.filename, (err) => {    // x√≥a file ·∫£nh theo ƒë∆∞·ªùng d·∫´n n·∫øu ng∆∞·ªùi d√πng ko t·ªìn t·∫°i
          if (err) {
            console.error("Error deleting file:", err);
          }
        });

        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }

      const createdImage = await this.model.hinh_anh.create({
        data: {
          ten_hinh: file.filename,
          duong_dan: process.cwd() + "/public/img/" + file.filename,
          mo_ta,
          nguoi_dung_id: +userID
        }
      });

      let newData: UserSaveImgType = {
        nguoi_dung_id: +userID,
        hinh_id: createdImage.hinh_id, // L·∫•y hinh_id t·ª´ b·∫£n ghi v·ª´a t·∫°o
        ngay_luu: new Date()
      }
      await this.model.luu_anh.create({
        data: newData
      })

      successCode(res, file, 201, 'Th√™m ·∫£nh th√†nh c√¥ng !');
    }
    catch (exception) {
      console.log('üöÄ ~ file: user.service.ts:363 ~ UserService ~ uploadImg ~ exception:', exception,);
      errorCode(res, 'L·ªói BE !');
    }
  }

  // ========================================
  //      PUT S·ª¨A TH√îNG C√Å NH√ÇN C·ª¶A USER
  // ========================================
  async updateInfo(id: string, body: UserSignUpType, res: Response) {
    try {
      let { email, mat_khau, ho_ten, tuoi, anh_dai_dien } = body;

      let checkEmail = await this.model.nguoi_dung.findFirst({
        where: {
          nguoi_dung_id: +id,
          email
        },
      });

      if (checkEmail === null) {
        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }

      await this.model.nguoi_dung.update({
        where: {
          nguoi_dung_id: +id,
          email
        },
        data: {
          mat_khau: await bcrypt.hash(mat_khau, 10), //  thay ƒë·ªïi bcrypt.hashSync th√†nh await bcrypt.hash ƒë·ªÉ s·ª≠ d·ª•ng h√†m hash b·∫•t ƒë·ªìng b·ªô. ƒêi·ªÅu n√†y c·∫ßn thi·∫øt ƒë·ªÉ tr√°nh blocking thread ch√≠nh khi m√£ h√≥a m·∫≠t kh·∫©u.
          ho_ten,
          tuoi,
          anh_dai_dien
        }
      })

      successCode(res, body, 200, "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:367 ~ UserService ~ updateInfo ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }


}
