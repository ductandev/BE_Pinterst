import { Injectable, Param } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';
import { ConfigService } from '@nestjs/config';
import { UserSignUpType } from 'src/auth/entities/auth.entity';
import { Response } from 'express';
import { errorCode, failCode, successCode } from 'src/Config/response';
// TH∆Ø VI·ªÜN M√É H√ìA PASSWORD
// yarn add bcrypt
import * as bcrypt from 'bcrypt';

@Injectable()
export class UserService {
  constructor(private configService: ConfigService) { }

  model = new PrismaClient();

  // ========================================
  //      GET INFO ALL USER
  // ========================================
  async getInfoAllUser(res: Response) {
    try {
      let data = await this.model.nguoi_dung.findMany()
      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:195 ~ UserService ~ getInfoAllUser ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

  // ========================================
  //      GET INFO BY USER_ID
  // ========================================
  async getInfoByUserId(id: string, res: Response) {
    try {
      let data = await this.model.nguoi_dung.findFirst({
        where: {
          nguoi_dung_id: +id
        }
      });

      if (data === null) {
        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }

      successCode(res, data, 200, "Th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:218 ~ UserService ~ getInfoByUserId ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

  // ========================================
  //      PUT S·ª¨A TH√îNG C√Å NH√ÇN C·ª¶A USER
  // ========================================
  async updateInfo(id: string, body: UserSignUpType, res: Response) {
    try {
      let { email, mat_khau, ho_ten, tuoi, anh_dai_dien } = body;

      let checkEmail = await this.model.nguoi_dung.findFirst({
        where: {
          nguoi_dung_id: +id,
          email
        },
      });

      if (checkEmail === null) {
        return failCode(res, '', 400, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !")
      }

      await this.model.nguoi_dung.update({
        where: {
          nguoi_dung_id: +id,
          email
        },
        data: {
          mat_khau: await bcrypt.hash(mat_khau, 10), //  thay ƒë·ªïi bcrypt.hashSync th√†nh await bcrypt.hash ƒë·ªÉ s·ª≠ d·ª•ng h√†m hash b·∫•t ƒë·ªìng b·ªô. ƒêi·ªÅu n√†y c·∫ßn thi·∫øt ƒë·ªÉ tr√°nh blocking thread ch√≠nh khi m√£ h√≥a m·∫≠t kh·∫©u.
          ho_ten,
          tuoi,
          anh_dai_dien
        }
      })

      successCode(res, body, 200, "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng !")
    }
    catch (exception) {
      console.log("üöÄ ~ file: user.service.ts:367 ~ UserService ~ updateInfo ~ exception:", exception)
      errorCode(res, "L·ªói BE")
    }
  }

}
